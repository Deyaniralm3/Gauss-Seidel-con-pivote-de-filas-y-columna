import numpy as np
import sys

def read_inputs(text_basis):
    a_temp, b_temp=text_basis.strip().split("=")
    b_temp=eval(b_temp.strip(" "))
    a_temp=a_temp[:-1]
    a_temp=[eval(i) for i in a_temp.split()]
    print(a_temp, b_temp)
    return a_temp, b_temp

def read_file(path):
    b=[]
    A=[]

    with open(path, "r" ) as f:
        flag=0
        for line in f:
            if line.strip() != "X":
                pass
            else:
                flag =1
                continue
            if line.strip() == "Y":
                break
            
            if flag == 1:
                aux_1, aux_2 = read_inputs(line)
                A.append(aux_1)
                b.append(aux_2)
                
    return A, b

ruta = 'C:/Users/Admin/Desktop/ACTUARÍA/Tercer Sem/Metodos/Matriz Prueba2.txt'
A, b = read_file(ruta)

def pivoteo_fila(A,b):
    
    n=len(A[0])
    
    for r in range(n-1):
        s_max=0
        #Recorre filas
        for i in range(r,n):
            max_temp=abs(A[i][r])
            #Recorre columnas
            for j in range(r,n):
                if (abs(A[i][j])>max_temp):
                    max_temp=abs(A[i][j])
            s_temp=abs(A[i][r])/max_temp
            if (s_temp>s_max):
                 s_max=s_temp
                 fila=i
        
        aux=A[r]
        A[r]=A[fila]
        A[fila]=aux
        
        aux=b[r]
        b[r]=b[fila]
        b[fila]=aux

    return A,b        


def gauss_seidel(A,b,tam, umbral, max_iter):
    long=len(A[0]) 
    alt=len(A)
    if alt!=long:
        sys.exit("La matriz no es cuadrada")       
    x = [0.0 for i in range(tam)]
    aux = [1.0 for i in range(tam)]
    for ite in range(max_iter):
        for h in range(tam):
            aux[h] = 0.0  
            x[h] = (b[h]-sum([i*j*k for i,j,k in zip(aux,x,A[h])]))/A[h][h]
            aux[h] = 1.0
        current_differences = [b[h] - sum([i*j for i,j in zip(x,A[h])]) for h in range(tam)]
        error = sum([abs(i) for i in current_differences])
        
        if error < umbral:
            return x
            break
            
def gauss_seidelnumphy(A,b, tam, umbral, max_iter):
    A_np = np.array(A)
    b_np = np.array(b)
    x_np = np.zeros(tam) 
    aux_np = np.ones(tam)
    for ite in range(max_iter):
        for i in range(tam):
            aux_np[i] = 0.0
            x_np[i] = (b_np[i] - np.sum(x_np*aux_np*A_np[i,:]))/A_np[i][i]
            aux_np[i] = 1.0
        
        current_b = np.dot(A_np,x_np)
        error = np.sum(np.abs(current_b-b_np))
        
        if error < umbral:
            return x_np
            break
        
print("Pivoteo p/ filas:", pivoteo_fila(A, b))  
print("Las soluciones sin numpy son:", gauss_seidel(A, b, 3, 0.0001, 100000))
print("Las soluciones mediante numpy:", gauss_seidelnumphy(A, b,3, 0.0001, 100000))
